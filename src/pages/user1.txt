import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Pie, Bar } from 'react-chartjs-2';
import { Chart, registerables } from 'chart.js';
Chart.register(...registerables);

const API_BASE_URL = 'http://localhost:3001/api';

const fetchMetrics = async (token) => {
  try {
    const response = await fetch(`${API_BASE_URL}/metricas`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    if (!response.ok) throw new Error('Error al obtener m√©tricas');
    return await response.json();
  } catch (error) {
    console.error('Error fetching metrics:', error);
    throw error;
  }
};

const fetchRecentRecords = async (token) => {
  try {
    const response = await fetch(`${API_BASE_URL}/ultimos-registros`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });
    if (!response.ok) throw new Error('Error al obtener registros recientes');
    return await response.json();
  } catch (error) {
    console.error('Error fetching recent records:', error);
    throw error;
  }
};

const DashboardFiltromatic = () => {
  const navigate = useNavigate();
  const [nombreUsuario, setNombreUsuario] = useState("Operador");
  const [metrics, setMetrics] = useState(null);
  const [recentActivities, setRecentActivities] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [advancedStats, setAdvancedStats] = useState(null);
  const [chartData, setChartData] = useState(null);
  const [dateRange, setDateRange] = useState({
    start: new Date().toISOString().split('T')[0],
    end: new Date().toISOString().split('T')[0]
  });

  useEffect(() => {
    const loadData = async () => {
      try {
        const token = localStorage.getItem("token");
        const [metricsData, activitiesData, statsData, chartData] = await Promise.all([
          fetchMetrics(token),
          fetchRecentRecords(token),
          fetchAdvancedStats(token),
          fetchChartData(token)
        ]);
        
        setMetrics(metricsData);
        setRecentActivities(activitiesData);
        setAdvancedStats(statsData);
        setChartData(chartData);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, []);

  const fetchAdvancedStats = async (token) => {
    const response = await fetch(`${API_BASE_URL}/estadisticas-avanzadas`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (!response.ok) throw new Error('Error al obtener estad√≠sticas avanzadas');
    return await response.json();
  };

  const fetchChartData = async (token) => {
    const response = await fetch(`${API_BASE_URL}/datos-graficos`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (!response.ok) throw new Error('Error al obtener datos para gr√°ficos');
    return await response.json();
  };

  const handleDateFilter = async () => {
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(
        `${API_BASE_URL}/registros-por-fecha?fechaInicio=${dateRange.start}&fechaFin=${dateRange.end}`,
        { headers: { 'Authorization': `Bearer ${token}` } }
      );
      const data = await response.json();
      setRecentActivities(data);
    } catch (err) {
      setError(err.message);
    }
  };

  const handleCerrarSesion = () => {
    localStorage.removeItem("token");
    navigate("/login");
  };

  if (loading) return (
    <div style={styles.loadingContainer}>
      <div style={styles.loadingSpinner}></div>
      <div style={styles.loadingText}>Cargando datos del sistema...</div>
    </div>
  );
  
  if (error) return (
    <div style={styles.errorContainer}>
      <div style={styles.errorIcon}>‚ö†Ô∏è</div>
      <div style={styles.errorText}>Error: {error}</div>
      <button 
        onClick={() => window.location.reload()} 
        style={styles.retryButton}
      >
        Reintentar
      </button>
    </div>
  );

  return (
    <div style={styles.container}>
      <header style={styles.header}>
        <div style={styles.headerContent}>
          <h1 style={styles.title}>
            <span style={styles.logoIcon}>üîÑ</span> 
            Dashboard FiltroMatic
          </h1>
          <div style={styles.userInfo}>
            <div style={styles.userBadge}>
              <div style={styles.userAvatar}>{nombreUsuario.charAt(0)}</div>
              <div style={styles.userDetails}>
                <span style={styles.userName}>{nombreUsuario}</span>
                <span style={styles.userRole}>Operador</span>
              </div>
            </div>
            <button onClick={handleCerrarSesion} style={styles.logoutButton}>
              Cerrar Sesi√≥n
            </button>
          </div>
        </div>
      </header>
      
      <main style={styles.main}>
        <div style={styles.dashboardHeader}>
          <h2 style={styles.dashboardTitle}>Panel de Control</h2>
          <div style={styles.currentDate}>
            {new Date().toLocaleDateString('es-ES', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}
          </div>
        </div>

        <section style={styles.metricsSection}>
          <div style={styles.sectionHeader}>
            <h2 style={styles.sectionTitle}>M√©tricas del Sistema</h2>
            <div style={styles.sectionDivider}></div>
          </div>
          <div style={styles.metricsGrid}>
            <MetricaCard 
              titulo="Total Sensores" 
              valor={metrics?.totalSensores} 
              unidad="sensores" 
              icono="üõ†Ô∏è"
              color="#4361ee"
            />
            <MetricaCard 
              titulo="Total Registros" 
              valor={metrics?.totalRegistros} 
              unidad="registros" 
              icono="üìä"
              color="#3a0ca3"
            />
            <MetricaCard 
              titulo="Bandas Activas" 
              valor={metrics?.bandasActivas} 
              unidad={`de ${metrics?.totalBandas}`} 
              icono="üîÑ"
              color="#7209b7"
            />
            <MetricaCard 
              titulo="Controladores" 
              valor={metrics?.controladoresActivos} 
              unidad="activos" 
              icono="üéõÔ∏è"
              color="#f72585"
            />
            <MetricaCard 
              titulo="Clientes" 
              valor={advancedStats?.totalClientes} 
              unidad="registrados" 
              icono="üë•"
              color="#4cc9f0"
            />
            <MetricaCard 
              titulo="Velocidad Promedio" 
              valor={advancedStats?.velocidadPromedio?.toFixed(2)} 
              unidad="m/s" 
              icono="‚ö°"
              color="#4895ef"
            />
          </div>
        </section>

        <div style={styles.chartsRow}>
          <div style={styles.chartContainer}>
            <div style={styles.chartHeader}>
              <h3 style={styles.chartTitle}>Estado de Bandas</h3>
              <div style={styles.chartLegend}>
                <div style={styles.legendItem}>
                  <div style={{...styles.legendColor, backgroundColor: '#4CAF50'}}></div>
                  <span>Activas</span>
                </div>
                <div style={styles.legendItem}>
                  <div style={{...styles.legendColor, backgroundColor: '#F44336'}}></div>
                  <span>Inactivas</span>
                </div>
              </div>
            </div>
            <div style={styles.chartWrapper}>
              {chartData && (
                <Pie
                  data={{
                    labels: ['Activas', 'Inactivas'],
                    datasets: [{
                      data: [chartData.bandasActivas, chartData.bandasInactivas],
                      backgroundColor: ['#4CAF50', '#F44336'],
                      borderColor: ['#388E3C', '#D32F2F'],
                      borderWidth: 1
                    }]
                  }}
                  options={{
                    plugins: {
                      legend: {
                        display: false
                      }
                    },
                    responsive: true,
                    maintainAspectRatio: false
                  }}
                />
              )}
            </div>
          </div>
          <div style={styles.chartContainer}>
            <div style={styles.chartHeader}>
              <h3 style={styles.chartTitle}>Distribuci√≥n de Sensores</h3>
              <div style={styles.chartLegend}>
                <div style={styles.legendItem}>
                  <div style={{...styles.legendColor, backgroundColor: '#FF5252'}}></div>
                  <span>Sensores Rojo</span>
                </div>
                <div style={styles.legendItem}>
                  <div style={{...styles.legendColor, backgroundColor: '#4FC3F7'}}></div>
                  <span>Sensores Verde/Azul</span>
                </div>
              </div>
            </div>
            <div style={styles.chartWrapper}>
              {chartData && (
                <Bar
                  data={{
                    labels: ['Sensores Rojo', 'Sensores Verde/Azul'],
                    datasets: [{
                      label: 'Cantidad',
                      data: [chartData.sensoresRojo, chartData.sensoresVerdeAzul],
                      backgroundColor: ['#FF5252', '#4FC3F7'],
                      borderColor: ['#D32F2F', '#0288D1'],
                      borderWidth: 1,
                      borderRadius: 6
                    }]
                  }}
                  options={{ 
                    scales: { 
                      y: { 
                        beginAtZero: true,
                        grid: {
                          display: true,
                          color: 'rgba(0,0,0,0.05)'
                        }
                      },
                      x: {
                        grid: {
                          display: false
                        }
                      }
                    },
                    plugins: {
                      legend: {
                        display: false
                      }
                    },
                    responsive: true,
                    maintainAspectRatio: false
                  }}
                />
              )}
            </div>
          </div>
        </div>

        <div style={styles.gridContainer}>
          <section style={styles.statusSection}>
            <div style={styles.sectionHeader}>
              <h2 style={styles.sectionTitle}>Estado del Sistema</h2>
              <div style={styles.sectionDivider}></div>
            </div>
            <div style={styles.statusGrid}>
              <StatusCard 
                titulo="Sensor de Color" 
                estado={metrics?.bandasActivas > 0 ? "Operativo" : "Inactivo"} 
                estadoOk={metrics?.bandasActivas > 0}
                icono="üé®"
              />
              <StatusCard 
                titulo="Banda Transportadora" 
                estado={metrics?.bandasActivas > 0 ? "Activa" : "Inactiva"} 
                estadoOk={metrics?.bandasActivas > 0}
                icono="üîÑ"
              />
              <StatusCard 
                titulo="Mecanismo de Separaci√≥n" 
                estado={metrics?.controladoresActivos > 0 ? "Funcionando" : "Detenido"} 
                estadoOk={metrics?.controladoresActivos > 0}
                icono="‚öôÔ∏è"
              />
              <StatusCard 
                titulo="Sensores Activos" 
                estado={`${advancedStats?.sensoresActivos || 0}/${metrics?.totalSensores || 0}`} 
                estadoOk={(advancedStats?.sensoresActivos / metrics?.totalSensores) > 0.5}
                icono="üîç"
              />
            </div>
          </section>

          <section style={styles.activitySection}>
            <div style={styles.sectionHeader}>
              <h2 style={styles.sectionTitle}>Actividad Reciente</h2>
              <div style={styles.sectionDivider}></div>
            </div>
            <div style={styles.activityHeader}>
              <div style={styles.dateFilter}>
                <input 
                  type="date" 
                  value={dateRange.start}
                  onChange={(e) => setDateRange({...dateRange, start: e.target.value})}
                  style={styles.dateInput}
                />
                <span style={styles.dateRangeSeparator}>a</span>
                <input 
                  type="date" 
                  value={dateRange.end}
                  onChange={(e) => setDateRange({...dateRange, end: e.target.value})}
                  style={styles.dateInput}
                />
                <button onClick={handleDateFilter} style={styles.filterButton}>
                  Filtrar
                </button>
              </div>
            </div>
            <div style={styles.activityList}>
              {recentActivities.length > 0 ? (
                recentActivities.map((activity, index) => (
                  <ActivityItem 
                    key={index}
                    texto={`${activity.object} (ID: ${activity.id})`}
                    tiempo={`${formatDate(activity.fecha)} ${activity.hora}`}
                    tipo={index % 3 === 0 ? 'success' : index % 3 === 1 ? 'warning' : 'error'}
                  />
                ))
              ) : (
                <div style={styles.noActivities}>
                  <div style={styles.noActivitiesIcon}>üì≠</div>
                  <p style={styles.noActivitiesText}>No hay actividades en este rango de fechas</p>
                </div>
              )}
            </div>
          </section>
        </div>
      </main>
      <footer style={styles.footer}>
        <p>¬© {new Date().getFullYear()} FiltroMatic - Sistema de Monitoreo Industrial</p>
      </footer>
    </div>
  );
};

const MetricaCard = ({ titulo, valor, unidad, icono, color }) => (
  <div style={styles.metricaCard}>
    <div style={{...styles.metricaIconContainer, backgroundColor: color}}>
      <span style={styles.metricaIcon}>{icono}</span>
    </div>
    <div style={styles.metricaContent}>
      <h3 style={styles.metricaTitle}>{titulo}</h3>
      <p style={styles.metricaValor}>
        {valor || '--'} <span style={styles.metricaUnidad}>{unidad}</span>
      </p>
    </div>
  </div>
);

const StatusCard = ({ titulo, estado, estadoOk, icono }) => (
  <div style={styles.statusCard}>
    <div style={styles.statusIconContainer}>
      <span style={styles.statusIcon}>{icono}</span>
    </div>
    <div style={styles.statusContent}>
      <h3 style={styles.statusTitle}>{titulo}</h3>
      <div style={styles.statusIndicatorContainer}>
        <div style={{
          ...styles.statusIndicator,
          backgroundColor: estadoOk ? '#28a745' : '#dc3545'
        }}></div>
        <p style={{ 
          ...styles.statusValor, 
          color: estadoOk ? '#28a745' : '#dc3545' 
        }}>
          {estado}
        </p>
      </div>
    </div>
  </div>
);

const ActivityItem = ({ texto, tiempo, tipo }) => {
  const typeStyles = {
    success: { borderLeft: '4px solid #4CAF50', backgroundColor: 'rgba(76, 175, 80, 0.1)' },
    warning: { borderLeft: '4px solid #FFC107', backgroundColor: 'rgba(255, 193, 7, 0.1)' },
    error: { borderLeft: '4px solid #F44336', backgroundColor: 'rgba(244, 67, 54, 0.1)' }
  };
  
  const typeIcons = {
    success: '‚úÖ',
    warning: '‚ö†Ô∏è',
    error: '‚ùå'
  };
  
  return (
    <div style={{ ...styles.activityItem, ...typeStyles[tipo] }}>
      <div style={styles.activityContent}>
        <div style={styles.activityIcon}>{typeIcons[tipo]}</div>
        <p style={styles.activityText}>{texto}</p>
      </div>
      <span style={styles.activityTime}>{tiempo}</span>
    </div>
  );
};

const formatDate = (dateString) => {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString('es-ES');
};

const styles = {
  container: {
    fontFamily: "'Segoe UI', 'Roboto', 'Helvetica Neue', sans-serif",
    backgroundColor: "#f8f9fa",
    minHeight: "100vh",
    display: "flex",
    flexDirection: "column",
  },
  header: {
    backgroundColor: "#ffffff",
    padding: "0 20px",
    boxShadow: "0 2px 10px rgba(0,0,0,0.1)",
    position: "sticky",
    top: 0,
    zIndex: 100,
  },
  headerContent: {
    maxWidth: "1400px",
    margin: "0 auto",
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    padding: "15px 0",
  },
  title: {
    fontSize: "24px",
    fontWeight: "700",
    margin: 0,
    color: "#333",
    display: "flex",
    alignItems: "center",
  },
  logoIcon: {
    marginRight: "10px",
    fontSize: "28px",
  },
  userInfo: {
    display: "flex",
    alignItems: "center",
    gap: "20px",
  },
  userBadge: {
    display: 'flex',
    alignItems: 'center',
    gap: '10px',
  },
  userAvatar: {
    width: '40px',
    height: '40px',
    borderRadius: '50%',
    backgroundColor: '#4361ee',
    color: 'white',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontWeight: 'bold',
    fontSize: '18px',
  },
  userDetails: {
    display: 'flex',
    flexDirection: 'column',
  },
  userName: {
    fontWeight: 'bold',
    fontSize: '16px',
    color: '#333',
  },
  userRole: {
    fontSize: '14px',
    color: '#6c757d',
  },
  logoutButton: {
    padding: "8px 16px",
    backgroundColor: "#f72585",
    color: "white",
    border: "none",
    borderRadius: "6px",
    cursor: "pointer",
    transition: "all 0.2s ease",
    fontWeight: "500",
    display: "flex",
    alignItems: "center",
    gap: "5px",
    boxShadow: "0 2px 5px rgba(247, 37, 133, 0.3)",
  },
  main: {
    padding: "20px",
    maxWidth: "1400px",
    margin: "0 auto",
    width: "100%",
    flex: 1,
  },
  dashboardHeader: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: "30px",
  },
  dashboardTitle: {
    fontSize: "28px",
    fontWeight: "700",
    color: "#333",
    margin: 0,
  },
  currentDate: {
    fontSize: "16px",
    color: "#6c757d",
    fontStyle: "italic",
  },
  sectionHeader: {
    marginBottom: "20px",
  },
  sectionTitle: {
    fontSize: "20px",
    fontWeight: "600",
    color: "#333",
    margin: "0 0 10px 0",
  },
  sectionDivider: {
    height: "3px",
    width: "60px",
    backgroundColor: "#4361ee",
    borderRadius: "2px",
  },
  metricsSection: {
    marginBottom: "30px",
  },
  metricsGrid: {
    display: "grid",
    gridTemplateColumns: "repeat(auto-fill, minmax(250px, 1fr))",
    gap: "20px",
  },
  metricaCard: {
    backgroundColor: "#ffffff",
    borderRadius: "10px",
    boxShadow: "0 4px 12px rgba(0,0,0,0.05)",
    overflow: "hidden",
    display: "flex",
    transition: "transform 0.2s ease, box-shadow 0.2s ease",
    cursor: "default",
    "&:hover": {
      transform: "translateY(-5px)",
      boxShadow: "0 8px 15px rgba(0,0,0,0.1)",
    },
  },
  metricaIconContainer: {
    width: "80px",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    color: "white",
  },
  metricaIcon: {
    fontSize: '24px',
  },
  metricaContent: {
    padding: "20px",
    flex: 1,
  },
  metricaTitle: {
    fontSize: "16px",
    fontWeight: "500",
    color: "#6c757d",
    margin: "0 0 10px 0",
  },
  metricaValor: {
    fontSize: "24px",
    fontWeight: "700",
    margin: "0",
    color: "#333",
  },
  metricaUnidad: {
    fontSize: "14px",
    color: "#6c757d",
    fontWeight: "normal",
  },
  chartsRow: {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(450px, 1fr))',
    gap: '20px',
    marginBottom: '30px',
  },
  chartContainer: {
    backgroundColor: '#ffffff',
    padding: '20px',
    borderRadius: '10px',
    boxShadow: '0 4px 12px rgba(0,0,0,0.05)',
  },
  chartHeader: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: '15px',
  },
  chartTitle: {
    fontSize: '18px',
    fontWeight: '600',
    color: '#333',
    margin: 0,
  },
  chartLegend: {
    display: 'flex',
    gap: '15px',
  },
  legendItem: {
    display: 'flex',
    alignItems: 'center',
    gap: '5px',
    fontSize: '14px',
    color: '#6c757d',
  },
  legendColor: {
    width: '12px',
    height: '12px',
    borderRadius: '3px',
  },
  chartWrapper: {
    height: '250px',
    position: 'relative',
  },
  gridContainer: {
    display: 'grid',
    gridTemplateColumns: 'minmax(300px, 1fr) minmax(500px, 2fr)',
    gap: '20px',
    '@media (max-width: 992px)': {
      gridTemplateColumns: '1fr',
    },
  },
  statusSection: {
    marginBottom: "30px",
  },
  statusGrid: {
    display: "grid",
    gridTemplateColumns: "repeat(auto-fill, minmax(200px, 1fr))",
    gap: "20px",
  },
  statusCard: {
    backgroundColor: "#ffffff",
    borderRadius: "10px",
    boxShadow: "0 4px 12px rgba(0,0,0,0.05)",
    padding: "20px",
    transition: "transform 0.2s ease",
    cursor: "default",
    "&:hover": {
      transform: "translateY(-5px)",
    },
  },
  statusIconContainer: {
    width: "50px",
    height: "50px",
    borderRadius: "10px",
    backgroundColor: "#f8f9fa",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    marginBottom: "15px",
  },
  statusIcon: {
    fontSize: '24px',
  },
  statusContent: {
    display: "flex",
    flexDirection: "column",
  },
  statusTitle: {
    fontSize: "16px",
    fontWeight: "500",
    color: "#333",
    margin: "0 0 10px 0",
  },
  statusIndicatorContainer: {
    display: "flex",
    alignItems: "center",
    gap: "10px",
  },
  statusIndicator: {
    width: "10px",
    height: "10px",
    borderRadius: "50%",
  },
  statusValor: {
    fontSize: "16px",
    fontWeight: "600",
    margin: "0",
  },
  activitySection: {
    backgroundColor: "#ffffff",
    padding: "20px",
    borderRadius: "10px",
    boxShadow: "0 4px 12px rgba(0,0,0,0.05)",
  },
  activityHeader: {
    display: 'flex',
    justifyContent: 'flex-end',
    marginBottom: '20px',
  },
  dateFilter: {
    display: 'flex',
    alignItems: 'center',
    gap: '10px',
    flexWrap: 'wrap',
  },
  dateRangeSeparator: {
    color: "#6c757d",
  },
  dateInput: {
    padding: "8px 12px",
    borderRadius: "6px",
    border: "1px solid #ced4da",
    fontSize: "14px",
    outline: "none",
    transition: "border-color 0.2s ease",
    "&:focus": {
      borderColor: "#4361ee",
    },
  },
  filterButton: {
    padding: "8px 16px",
    backgroundColor: "#4361ee",
    color: "white",
    border: "none",
    borderRadius: "6px",
    cursor: "pointer",
    transition: "background-color 0.2s ease",
    fontWeight: "500",
    "&:hover": {
      backgroundColor: "#3a56d4",
    },
  },
  activityList: {
    display: "flex",
    flexDirection: "column",
    gap: "15px",
    maxHeight: "400px",
    overflowY: "auto",
    padding: "5px",
    "&::-webkit-scrollbar": {
      width: "6px",
    },
    "&::-webkit-scrollbar-track": {
      background: "#f1f1f1",
      borderRadius: "10px",
    },
    "&::-webkit-scrollbar-thumb": {
      background: "#c1c1c1",
      borderRadius: "10px",
    },
  },
  activityItem: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    padding: "15px",
    borderRadius: "8px",
    transition: "transform 0.2s ease",
    "&:hover": {
      transform: "translateX(5px)",
    },
  },
  activityContent: {
    display: "flex",
    alignItems: "center",
    gap: "10px",
  },
  activityIcon: {
    fontSize: "18px",
  },
  activityText: {
    margin: 0,
    fontSize: "14px",
    fontWeight: "500",
    color: "#333",
  },
  activityTime: {
    fontSize: "12px",
    color: "#6c757d",
    fontWeight: "500",
  },
  noActivities: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: "40px 0",
  },
  noActivitiesIcon: {
    fontSize: "40px",
    marginBottom: "15px",
    color: "#6c757d",
  },
  noActivitiesText: {
    textAlign: "center",
    color: "#6c757d",
    fontStyle: "italic",
    margin: 0,
  },
  loadingContainer: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    height: '100vh',
    backgroundColor: '#f8f9fa',
  },
  loadingSpinner: {
    width: '50px',
    height: '50px',
    border: '5px solid rgba(67, 97, 238, 0.2)',
    borderTop: '5px solid #4361ee',
    borderRadius: '50%',
    animation: 'spin 1s linear infinite',
    marginBottom: '20px',
  },
  loadingText: {
    fontSize: '18px',
    color: '#6c757d',
    fontWeight: '500',
  },
  errorContainer: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    height: '100vh',
    backgroundColor: '#f8f9fa',
  },
  errorIcon: {
    fontSize: '50px',
    marginBottom: '20px',
  },
  errorText: {
    fontSize: '18px',
    color: '#dc3545',
    fontWeight: '500',
    marginBottom: '20px',
  },
  retryButton: {
    padding: '10px 20px',
    backgroundColor: '#4361ee',
    color: 'white',
    border: 'none',
    borderRadius: '6px',
    cursor: 'pointer',
    fontWeight: '500',
    transition: 'background-color 0.2s ease',
    '&:hover': {
      backgroundColor: '#3a56d4',
    },
  },
  footer: {
    backgroundColor: '#ffffff',
    padding: '15px 0',
    textAlign: 'center',
    borderTop: '1px solid #e9ecef',
    color: '#6c757d',
    fontSize: '14px',
  },
};

export default DashboardFiltromatic;